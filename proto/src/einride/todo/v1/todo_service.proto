syntax = "proto3";

package einride.todo.v1;

import "einride/todo/v1/todo.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "Todo.V1";
option go_package = "github.com/einride-interviews/backend-software-engineer/proto/gen/go/einride/todo/v1;todov1";
option java_multiple_files = true;
option java_outer_classname = "TodoServiceProto";
option java_package = "tech.einride.todo.v1";
option objc_class_prefix = "TXX";
option php_namespace = "Todo\\V1";

// Todo service.
service TodoService {
  option (google.api.default_host) = "localhost:8080";

  // Create a todo.
  rpc CreateTodo(CreateTodoRequest) returns (Todo) {
    option (google.api.http) = {
      post: "/v1/todos"
      body: "todo"
    };
    option (google.api.method_signature) = "todo,todo_id";
  };

  // Get a todo.
  rpc GetTodo(GetTodoRequest) returns (Todo) {
    option (google.api.http) = {
      get: "/v1/{name=todos/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // Update a todo.
  rpc UpdateTodo(UpdateTodoRequest) returns (Todo) {
    option (google.api.http) = {
      patch: "/v1/{todo.name=todos/*}"
      body: "todo"
    };
    option (google.api.method_signature) = "todo,update_mask";
  }

  // Delete a todo.
  rpc DeleteTodo(DeleteTodoRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=todos/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // List todos.
  rpc ListTodos(ListTodosRequest) returns (ListTodosResponse) {
    option (google.api.http) = {
      get: "/v1/todo"
    };
  }
}

// Request to CreateTodo method.
message CreateTodoRequest {
  // The todo to create.
  Todo todo = 1 [(google.api.field_behavior) = REQUIRED];
  // The ID to use for the todo, which will become the final component of
  // the todo's resource name.
  string todo_id = 2;
}

// Request to GetTodo method.
message GetTodoRequest {
  // Resource name of the todo to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "interview.einride.tech/Todo"
    }
  ];
}

// Request to UpdateTodo method.
message UpdateTodoRequest {
  // The todo to update.
  //
  // The todo's `name` field is used to identify the todo to be updated.
  Todo todo = 1 [(google.api.field_behavior) = REQUIRED];
  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request to DeleteTodo method.
message DeleteTodoRequest {
  // Resource name of the todo to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "interview.einride.tech/Todo"
    }
  ];
}

// Request to ListTodos method.
message ListTodosRequest {
  // The maximum number of results to return. The service may return fewer
  // results than this value.
  int32 page_size = 1;
  // A page token, received from a previous call. Provide this to retrieve the
  // subsequent page.
  //
  // When paginating, all other parameters provided must match the call that
  // provided the page token.
  string page_token = 2;
}

// Response from ListTodos method.
message ListTodosResponse {
  // The todos.
  repeated Todo todos = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}
