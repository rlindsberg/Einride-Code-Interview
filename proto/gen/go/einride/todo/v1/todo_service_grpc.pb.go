// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todov1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	// Create a todo.
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	// Get a todo.
	GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	// Update a todo.
	UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	// Delete a todo.
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// List todos.
	ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*ListTodosResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

var todoServiceCreateTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateTodo",
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/einride.todo.v1.TodoService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceGetTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "GetTodo",
}

func (c *todoServiceClient) GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/einride.todo.v1.TodoService/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceUpdateTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateTodo",
}

func (c *todoServiceClient) UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/einride.todo.v1.TodoService/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceDeleteTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteTodo",
}

func (c *todoServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/einride.todo.v1.TodoService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceListTodosStreamDesc = &grpc.StreamDesc{
	StreamName: "ListTodos",
}

func (c *todoServiceClient) ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*ListTodosResponse, error) {
	out := new(ListTodosResponse)
	err := c.cc.Invoke(ctx, "/einride.todo.v1.TodoService/ListTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceService is the service API for TodoService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTodoServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TodoServiceService struct {
	// Create a todo.
	CreateTodo func(context.Context, *CreateTodoRequest) (*Todo, error)
	// Get a todo.
	GetTodo func(context.Context, *GetTodoRequest) (*Todo, error)
	// Update a todo.
	UpdateTodo func(context.Context, *UpdateTodoRequest) (*Todo, error)
	// Delete a todo.
	DeleteTodo func(context.Context, *DeleteTodoRequest) (*empty.Empty, error)
	// List todos.
	ListTodos func(context.Context, *ListTodosRequest) (*ListTodosResponse, error)
}

func (s *TodoServiceService) createTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/einride.todo.v1.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) getTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/einride.todo.v1.TodoService/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTodo(ctx, req.(*GetTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) updateTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/einride.todo.v1.TodoService/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTodo(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) deleteTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/einride.todo.v1.TodoService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) listTodos(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/einride.todo.v1.TodoService/ListTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListTodos(ctx, req.(*ListTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterTodoServiceService registers a service implementation with a gRPC server.
func RegisterTodoServiceService(s grpc.ServiceRegistrar, srv *TodoServiceService) {
	srvCopy := *srv
	if srvCopy.CreateTodo == nil {
		srvCopy.CreateTodo = func(context.Context, *CreateTodoRequest) (*Todo, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
		}
	}
	if srvCopy.GetTodo == nil {
		srvCopy.GetTodo = func(context.Context, *GetTodoRequest) (*Todo, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
		}
	}
	if srvCopy.UpdateTodo == nil {
		srvCopy.UpdateTodo = func(context.Context, *UpdateTodoRequest) (*Todo, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
		}
	}
	if srvCopy.DeleteTodo == nil {
		srvCopy.DeleteTodo = func(context.Context, *DeleteTodoRequest) (*empty.Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
		}
	}
	if srvCopy.ListTodos == nil {
		srvCopy.ListTodos = func(context.Context, *ListTodosRequest) (*ListTodosResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "einride.todo.v1.TodoService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateTodo",
				Handler:    srvCopy.createTodo,
			},
			{
				MethodName: "GetTodo",
				Handler:    srvCopy.getTodo,
			},
			{
				MethodName: "UpdateTodo",
				Handler:    srvCopy.updateTodo,
			},
			{
				MethodName: "DeleteTodo",
				Handler:    srvCopy.deleteTodo,
			},
			{
				MethodName: "ListTodos",
				Handler:    srvCopy.listTodos,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "einride/todo/v1/todo_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// TodoServiceServer is the service API for TodoService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended unless you own the service definition.
type TodoServiceServer interface {
	// Create a todo.
	CreateTodo(context.Context, *CreateTodoRequest) (*Todo, error)
	// Get a todo.
	GetTodo(context.Context, *GetTodoRequest) (*Todo, error)
	// Update a todo.
	UpdateTodo(context.Context, *UpdateTodoRequest) (*Todo, error)
	// Delete a todo.
	DeleteTodo(context.Context, *DeleteTodoRequest) (*empty.Empty, error)
	// List todos.
	ListTodos(context.Context, *ListTodosRequest) (*ListTodosResponse, error)
}

// UnimplementedTodoServiceServer can be embedded to have forward compatible implementations of
// TodoServiceServer
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) CreateTodo(context.Context, *CreateTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoServiceServer) GetTodo(context.Context, *GetTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodo(context.Context, *UpdateTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodo(context.Context, *DeleteTodoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoServiceServer) ListTodos(context.Context, *ListTodosRequest) (*ListTodosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}

// RegisterTodoServiceServer registers a service implementation with a gRPC server.
func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	str := &TodoServiceService{
		CreateTodo: srv.CreateTodo,
		GetTodo:    srv.GetTodo,
		UpdateTodo: srv.UpdateTodo,
		DeleteTodo: srv.DeleteTodo,
		ListTodos:  srv.ListTodos,
	}
	RegisterTodoServiceService(s, str)
}
